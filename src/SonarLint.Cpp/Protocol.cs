// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Protocol.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace SonarLint.Cpp {

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public static partial class Protocol {

    #region Descriptor
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static Protocol() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Cg5Qcm90b2NvbC5wcm90byIrCgdSZXF1ZXN0EgwKBGZpbGUYASABKAkSEgoK", 
            "c2VhcmNoUGF0aBgDIAMoCSJOCghSZXNwb25zZRIeCgVpc3N1ZRgBIAMoCzIP", 
            "LlJlc3BvbnNlLklzc3VlGiIKBUlzc3VlEgsKA21zZxgBIAEoCRIMCgRsaW5l", 
            "GAIgASgFQhCqAg1Tb25hckxpbnQuQ3BwYgZwcm90bzM="));
      descriptor = pbr::FileDescriptor.InternalBuildGeneratedFileFrom(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedCodeInfo(null, new pbr::GeneratedCodeInfo[] {
            new pbr::GeneratedCodeInfo(typeof(global::SonarLint.Cpp.Request), new[]{ "File", "SearchPath" }, null, null, null),
            new pbr::GeneratedCodeInfo(typeof(global::SonarLint.Cpp.Response), new[]{ "Issue" }, null, null, new pbr::GeneratedCodeInfo[] { new pbr::GeneratedCodeInfo(typeof(global::SonarLint.Cpp.Response.Types.Issue), new[]{ "Msg", "Line" }, null, null, null)})
          }));
    }
    #endregion

  }
  #region Messages
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Request : pb::IMessage<Request> {
    private static readonly pb::MessageParser<Request> _parser = new pb::MessageParser<Request>(() => new Request());
    public static pb::MessageParser<Request> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::SonarLint.Cpp.Protocol.Descriptor.MessageTypes[0]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Request() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Request(Request other) : this() {
      file_ = other.file_;
      searchPath_ = other.searchPath_.Clone();
    }

    public Request Clone() {
      return new Request(this);
    }

    public const int FileFieldNumber = 1;
    private string file_ = "";
    public string File {
      get { return file_; }
      set {
        file_ = pb::Preconditions.CheckNotNull(value, "value");
      }
    }

    public const int SearchPathFieldNumber = 3;
    private static readonly pb::FieldCodec<string> _repeated_searchPath_codec
        = pb::FieldCodec.ForString(26);
    private readonly pbc::RepeatedField<string> searchPath_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> SearchPath {
      get { return searchPath_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Request);
    }

    public bool Equals(Request other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (File != other.File) return false;
      if(!searchPath_.Equals(other.searchPath_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      if (File.Length != 0) hash ^= File.GetHashCode();
      hash ^= searchPath_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (File.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(File);
      }
      searchPath_.WriteTo(output, _repeated_searchPath_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (File.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(File);
      }
      size += searchPath_.CalculateSize(_repeated_searchPath_codec);
      return size;
    }

    public void MergeFrom(Request other) {
      if (other == null) {
        return;
      }
      if (other.File.Length != 0) {
        File = other.File;
      }
      searchPath_.Add(other.searchPath_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            File = input.ReadString();
            break;
          }
          case 26: {
            searchPath_.AddEntriesFrom(input, _repeated_searchPath_codec);
            break;
          }
        }
      }
    }

  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
  public sealed partial class Response : pb::IMessage<Response> {
    private static readonly pb::MessageParser<Response> _parser = new pb::MessageParser<Response>(() => new Response());
    public static pb::MessageParser<Response> Parser { get { return _parser; } }

    public static pbr::MessageDescriptor Descriptor {
      get { return global::SonarLint.Cpp.Protocol.Descriptor.MessageTypes[1]; }
    }

    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    public Response() {
      OnConstruction();
    }

    partial void OnConstruction();

    public Response(Response other) : this() {
      issue_ = other.issue_.Clone();
    }

    public Response Clone() {
      return new Response(this);
    }

    public const int IssueFieldNumber = 1;
    private static readonly pb::FieldCodec<global::SonarLint.Cpp.Response.Types.Issue> _repeated_issue_codec
        = pb::FieldCodec.ForMessage(10, global::SonarLint.Cpp.Response.Types.Issue.Parser);
    private readonly pbc::RepeatedField<global::SonarLint.Cpp.Response.Types.Issue> issue_ = new pbc::RepeatedField<global::SonarLint.Cpp.Response.Types.Issue>();
    public pbc::RepeatedField<global::SonarLint.Cpp.Response.Types.Issue> Issue {
      get { return issue_; }
    }

    public override bool Equals(object other) {
      return Equals(other as Response);
    }

    public bool Equals(Response other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if(!issue_.Equals(other.issue_)) return false;
      return true;
    }

    public override int GetHashCode() {
      int hash = 1;
      hash ^= issue_.GetHashCode();
      return hash;
    }

    public override string ToString() {
      return pb::JsonFormatter.Default.Format(this);
    }

    public void WriteTo(pb::CodedOutputStream output) {
      issue_.WriteTo(output, _repeated_issue_codec);
    }

    public int CalculateSize() {
      int size = 0;
      size += issue_.CalculateSize(_repeated_issue_codec);
      return size;
    }

    public void MergeFrom(Response other) {
      if (other == null) {
        return;
      }
      issue_.Add(other.issue_);
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            issue_.AddEntriesFrom(input, _repeated_issue_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    public static partial class Types {
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
      public sealed partial class Issue : pb::IMessage<Issue> {
        private static readonly pb::MessageParser<Issue> _parser = new pb::MessageParser<Issue>(() => new Issue());
        public static pb::MessageParser<Issue> Parser { get { return _parser; } }

        public static pbr::MessageDescriptor Descriptor {
          get { return global::SonarLint.Cpp.Response.Descriptor.NestedTypes[0]; }
        }

        pbr::MessageDescriptor pb::IMessage.Descriptor {
          get { return Descriptor; }
        }

        public Issue() {
          OnConstruction();
        }

        partial void OnConstruction();

        public Issue(Issue other) : this() {
          msg_ = other.msg_;
          line_ = other.line_;
        }

        public Issue Clone() {
          return new Issue(this);
        }

        public const int MsgFieldNumber = 1;
        private string msg_ = "";
        public string Msg {
          get { return msg_; }
          set {
            msg_ = pb::Preconditions.CheckNotNull(value, "value");
          }
        }

        public const int LineFieldNumber = 2;
        private int line_;
        public int Line {
          get { return line_; }
          set {
            line_ = value;
          }
        }

        public override bool Equals(object other) {
          return Equals(other as Issue);
        }

        public bool Equals(Issue other) {
          if (ReferenceEquals(other, null)) {
            return false;
          }
          if (ReferenceEquals(other, this)) {
            return true;
          }
          if (Msg != other.Msg) return false;
          if (Line != other.Line) return false;
          return true;
        }

        public override int GetHashCode() {
          int hash = 1;
          if (Msg.Length != 0) hash ^= Msg.GetHashCode();
          if (Line != 0) hash ^= Line.GetHashCode();
          return hash;
        }

        public override string ToString() {
          return pb::JsonFormatter.Default.Format(this);
        }

        public void WriteTo(pb::CodedOutputStream output) {
          if (Msg.Length != 0) {
            output.WriteRawTag(10);
            output.WriteString(Msg);
          }
          if (Line != 0) {
            output.WriteRawTag(16);
            output.WriteInt32(Line);
          }
        }

        public int CalculateSize() {
          int size = 0;
          if (Msg.Length != 0) {
            size += 1 + pb::CodedOutputStream.ComputeStringSize(Msg);
          }
          if (Line != 0) {
            size += 1 + pb::CodedOutputStream.ComputeInt32Size(Line);
          }
          return size;
        }

        public void MergeFrom(Issue other) {
          if (other == null) {
            return;
          }
          if (other.Msg.Length != 0) {
            Msg = other.Msg;
          }
          if (other.Line != 0) {
            Line = other.Line;
          }
        }

        public void MergeFrom(pb::CodedInputStream input) {
          uint tag;
          while ((tag = input.ReadTag()) != 0) {
            switch(tag) {
              default:
                input.SkipLastField();
                break;
              case 10: {
                Msg = input.ReadString();
                break;
              }
              case 16: {
                Line = input.ReadInt32();
                break;
              }
            }
          }
        }

      }

    }
    #endregion

  }

  #endregion

}

#endregion Designer generated code
